// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package mysqlService

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-gin-video/domain/model"
)

func newCollect(db *gorm.DB, opts ...gen.DOOption) collect {
	_collect := collect{}

	_collect.collectDo.UseDB(db, opts...)
	_collect.collectDo.UseModel(&model.Collect{})

	tableName := _collect.collectDo.TableName()
	_collect.ALL = field.NewAsterisk(tableName)
	_collect.ID = field.NewInt32(tableName, "id")
	_collect.UID = field.NewInt32(tableName, "uid")
	_collect.Vid = field.NewInt32(tableName, "vid")

	_collect.fillFieldMap()

	return _collect
}

type collect struct {
	collectDo

	ALL field.Asterisk
	ID  field.Int32
	UID field.Int32
	Vid field.Int32

	fieldMap map[string]field.Expr
}

func (c collect) Table(newTableName string) *collect {
	c.collectDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c collect) As(alias string) *collect {
	c.collectDo.DO = *(c.collectDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *collect) updateTableName(table string) *collect {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.UID = field.NewInt32(table, "uid")
	c.Vid = field.NewInt32(table, "vid")

	c.fillFieldMap()

	return c
}

func (c *collect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *collect) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["uid"] = c.UID
	c.fieldMap["vid"] = c.Vid
}

func (c collect) clone(db *gorm.DB) collect {
	c.collectDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c collect) replaceDB(db *gorm.DB) collect {
	c.collectDo.ReplaceDB(db)
	return c
}

type collectDo struct{ gen.DO }

func (c collectDo) Debug() *collectDo {
	return c.withDO(c.DO.Debug())
}

func (c collectDo) WithContext(ctx context.Context) *collectDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c collectDo) ReadDB() *collectDo {
	return c.Clauses(dbresolver.Read)
}

func (c collectDo) WriteDB() *collectDo {
	return c.Clauses(dbresolver.Write)
}

func (c collectDo) Session(config *gorm.Session) *collectDo {
	return c.withDO(c.DO.Session(config))
}

func (c collectDo) Clauses(conds ...clause.Expression) *collectDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c collectDo) Returning(value interface{}, columns ...string) *collectDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c collectDo) Not(conds ...gen.Condition) *collectDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c collectDo) Or(conds ...gen.Condition) *collectDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c collectDo) Select(conds ...field.Expr) *collectDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c collectDo) Where(conds ...gen.Condition) *collectDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c collectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *collectDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c collectDo) Order(conds ...field.Expr) *collectDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c collectDo) Distinct(cols ...field.Expr) *collectDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c collectDo) Omit(cols ...field.Expr) *collectDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c collectDo) Join(table schema.Tabler, on ...field.Expr) *collectDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c collectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *collectDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c collectDo) RightJoin(table schema.Tabler, on ...field.Expr) *collectDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c collectDo) Group(cols ...field.Expr) *collectDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c collectDo) Having(conds ...gen.Condition) *collectDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c collectDo) Limit(limit int) *collectDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c collectDo) Offset(offset int) *collectDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c collectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *collectDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c collectDo) Unscoped() *collectDo {
	return c.withDO(c.DO.Unscoped())
}

func (c collectDo) Create(values ...*model.Collect) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c collectDo) CreateInBatches(values []*model.Collect, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c collectDo) Save(values ...*model.Collect) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c collectDo) First() (*model.Collect, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Collect), nil
	}
}

func (c collectDo) Take() (*model.Collect, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Collect), nil
	}
}

func (c collectDo) Last() (*model.Collect, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Collect), nil
	}
}

func (c collectDo) Find() ([]*model.Collect, error) {
	result, err := c.DO.Find()
	return result.([]*model.Collect), err
}

func (c collectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Collect, err error) {
	buf := make([]*model.Collect, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c collectDo) FindInBatches(result *[]*model.Collect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c collectDo) Attrs(attrs ...field.AssignExpr) *collectDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c collectDo) Assign(attrs ...field.AssignExpr) *collectDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c collectDo) Joins(fields ...field.RelationField) *collectDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c collectDo) Preload(fields ...field.RelationField) *collectDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c collectDo) FirstOrInit() (*model.Collect, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Collect), nil
	}
}

func (c collectDo) FirstOrCreate() (*model.Collect, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Collect), nil
	}
}

func (c collectDo) FindByPage(offset int, limit int) (result []*model.Collect, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c collectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c collectDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c collectDo) Delete(models ...*model.Collect) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *collectDo) withDO(do gen.Dao) *collectDo {
	c.DO = *do.(*gen.DO)
	return c
}
